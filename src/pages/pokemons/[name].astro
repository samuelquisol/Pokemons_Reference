---
import type { GetStaticPaths } from "astro";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await res.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name: name },
    props: { name: name, url: url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);

const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title=`Pokemon | #${id} ${name}`
  description=`Information about ${name}`
  image={imageSrc}
>
  <button onclick="history.back()" class="text-blue-500 mx-20">‚Üê Go Back</button
  >
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row">
      <div>
        <Title>{name}</Title>
      </div>

      <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
        <Icon data-heart-empty name="heart-empty" size={50} />
        <Icon data-heart-filled class="hidden" name="heart-filled" size={50} />
      </button>
    </div>

    <br />
    <PokemonCard url={url} name={name} isBig />
    <audio controls class="mb-5">
      <source src={audioSrc} type="audio/ogg" />
    </audio>
  </section>
</MainLayout>

<script>
  interface FavoritePokemon {
    name: String;
    id: Number;
  }

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem('favorites') ?? '[]'
    );

    const btnFavoritePokemon = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavoritePokemon) return;

    const pokemonName = btnFavoritePokemon.dataset.name;
    const pokemonId = btnFavoritePokemon.dataset.id;

    const heartEmpty = btnFavoritePokemon.querySelector(
      "[data-heart-empty]"
    ) as HTMLButtonElement;
    const heartFilled = btnFavoritePokemon.querySelector(
      "[data-heart-filled]"
    ) as HTMLButtonElement;

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some(fav => fav.name === pokemonName);

      if( isFavorite){
        favoritePokemons.filter(fav => fav.name !== pokemonName);
      }else {
        favoritePokemons.push({
          name: pokemonName,
          id: +pokemonId,
        })
      }

      localStorage.setItem('favorites', JSON.stringify(favoritePokemons))
    }

    btnFavoritePokemon.addEventListener("click", () => {

      heartEmpty.classList.toggle("hidden");
      heartFilled.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", () => {
    handlePageLoad();
  });
</script>

<style>
  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
